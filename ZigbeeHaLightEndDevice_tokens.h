// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: alarm mask, endpoint: 1
#define CREATOR_ALARM_MASK_1 0xB000
#define NVM3KEY_ALARM_MASK_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB000 )
// Creator for attribute: leave/join reason, endpoint: 1
#define CREATOR_LEAVE_JOIN_REASON_1 0xB001
#define NVM3KEY_LEAVE_JOIN_REASON_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB001 )
// Creator for attribute: alarm mask, endpoint: 2
#define CREATOR_ALARM_MASK_2 0xB002
#define NVM3KEY_ALARM_MASK_2 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB002 )
// Creator for attribute: alarm mask, endpoint: 10
#define CREATOR_ALARM_MASK_10 0xB003
#define NVM3KEY_ALARM_MASK_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB003 )
// Creator for attribute: color temp physical min, endpoint: 10
#define CREATOR_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_10 0xB004
#define NVM3KEY_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB004 )
// Creator for attribute: color temp physical max, endpoint: 10
#define CREATOR_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_10 0xB005
#define NVM3KEY_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB005 )
// Creator for attribute: start up color temperature mireds, endpoint: 10
#define CREATOR_START_UP_COLOR_TEMPERATURE_MIREDS_10 0xB006
#define NVM3KEY_START_UP_COLOR_TEMPERATURE_MIREDS_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB006 )
// Creator for attribute: physical min level, endpoint: 10
#define CREATOR_PHYSICAL_MIN_LEVEL_10 0xB007
#define NVM3KEY_PHYSICAL_MIN_LEVEL_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB007 )
// Creator for attribute: physical max level, endpoint: 10
#define CREATOR_PHYSICAL_MAX_LEVEL_10 0xB008
#define NVM3KEY_PHYSICAL_MAX_LEVEL_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB008 )
// Creator for attribute: min level, endpoint: 10
#define CREATOR_MIN_LEVEL_10 0xB009
#define NVM3KEY_MIN_LEVEL_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB009 )
// Creator for attribute: max level, endpoint: 10
#define CREATOR_MAX_LEVEL_10 0xB00A
#define NVM3KEY_MAX_LEVEL_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00A )
// Creator for attribute: power on level, endpoint: 10
#define CREATOR_POWER_ON_LEVEL_10 0xB00B
#define NVM3KEY_POWER_ON_LEVEL_10 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00B )
// Creator for attribute: alarm mask, endpoint: 11
#define CREATOR_ALARM_MASK_11 0xB00C
#define NVM3KEY_ALARM_MASK_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00C )
// Creator for attribute: color temp physical min, endpoint: 11
#define CREATOR_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_11 0xB00D
#define NVM3KEY_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00D )
// Creator for attribute: color temp physical max, endpoint: 11
#define CREATOR_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_11 0xB00E
#define NVM3KEY_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00E )
// Creator for attribute: start up color temperature mireds, endpoint: 11
#define CREATOR_START_UP_COLOR_TEMPERATURE_MIREDS_11 0xB00F
#define NVM3KEY_START_UP_COLOR_TEMPERATURE_MIREDS_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB00F )
// Creator for attribute: physical min level, endpoint: 11
#define CREATOR_PHYSICAL_MIN_LEVEL_11 0xB010
#define NVM3KEY_PHYSICAL_MIN_LEVEL_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB010 )
// Creator for attribute: physical max level, endpoint: 11
#define CREATOR_PHYSICAL_MAX_LEVEL_11 0xB011
#define NVM3KEY_PHYSICAL_MAX_LEVEL_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB011 )
// Creator for attribute: min level, endpoint: 11
#define CREATOR_MIN_LEVEL_11 0xB012
#define NVM3KEY_MIN_LEVEL_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB012 )
// Creator for attribute: max level, endpoint: 11
#define CREATOR_MAX_LEVEL_11 0xB013
#define NVM3KEY_MAX_LEVEL_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB013 )
// Creator for attribute: power on level, endpoint: 11
#define CREATOR_POWER_ON_LEVEL_11 0xB014
#define NVM3KEY_POWER_ON_LEVEL_11 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB014 )
// Creator for attribute: alarm mask, endpoint: 20
#define CREATOR_ALARM_MASK_20 0xB015
#define NVM3KEY_ALARM_MASK_20 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB015 )
// Creator for attribute: alarm mask, endpoint: 21
#define CREATOR_ALARM_MASK_21 0xB016
#define NVM3KEY_ALARM_MASK_21 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB016 )
// Creator for attribute: calibration multiplier, endpoint: 21
#define CREATOR_LUX_CALIB_MULT_21 0xB017
#define NVM3KEY_LUX_CALIB_MULT_21 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB017 )
// Creator for attribute: reverse wink threshold, endpoint: 21
#define CREATOR_REVERSE_WINK_THRESHOLD_21 0xB018
#define NVM3KEY_REVERSE_WINK_THRESHOLD_21 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB018 )
// Creator for attribute: measured floor, endpoint: 21
#define CREATOR_ILLUM_MEASURED_FLOOR_21 0xB019
#define NVM3KEY_ILLUM_MEASURED_FLOOR_21 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB019 )
// Creator for attribute: alarm mask, endpoint: 50
#define CREATOR_ALARM_MASK_50 0xB01A
#define NVM3KEY_ALARM_MASK_50 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB01A )


// Types for the tokens
#ifdef DEFINETYPES
typedef uint8_t  tokType_alarm_mask;
typedef uint16_t  tokType_color_control_color_temp_physical_min;
typedef uint16_t  tokType_color_control_color_temp_physical_max;
typedef uint16_t  tokType_start_up_color_temperature_mireds;
typedef uint8_t  tokType_physical_min_level;
typedef uint8_t  tokType_physical_max_level;
typedef uint8_t  tokType_min_level;
typedef uint8_t  tokType_max_level;
typedef uint8_t  tokType_power_on_level;
typedef uint32_t  tokType_leave_join_reason;
typedef uint32_t  tokType_lux_calib_mult;
typedef uint16_t  tokType_reverse_wink_threshold;
typedef uint16_t  tokType_illum_measured_floor;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(ALARM_MASK_1, tokType_alarm_mask, 0x00)
DEFINE_BASIC_TOKEN(LEAVE_JOIN_REASON_1, tokType_leave_join_reason, 0x00000000)
DEFINE_BASIC_TOKEN(ALARM_MASK_2, tokType_alarm_mask, 0x00)
DEFINE_BASIC_TOKEN(ALARM_MASK_10, tokType_alarm_mask, 0x00)
DEFINE_BASIC_TOKEN(COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_10, tokType_color_control_color_temp_physical_min, 0x0000)
DEFINE_BASIC_TOKEN(COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_10, tokType_color_control_color_temp_physical_max, 0xFEFF)
DEFINE_BASIC_TOKEN(START_UP_COLOR_TEMPERATURE_MIREDS_10, tokType_start_up_color_temperature_mireds, 0x011E)
DEFINE_BASIC_TOKEN(PHYSICAL_MIN_LEVEL_10, tokType_physical_min_level, 0x01)
DEFINE_BASIC_TOKEN(PHYSICAL_MAX_LEVEL_10, tokType_physical_max_level, 0xFE)
DEFINE_BASIC_TOKEN(MIN_LEVEL_10, tokType_min_level, 0x01)
DEFINE_BASIC_TOKEN(MAX_LEVEL_10, tokType_max_level, 0xFE)
DEFINE_BASIC_TOKEN(POWER_ON_LEVEL_10, tokType_power_on_level, 0xFE)
DEFINE_BASIC_TOKEN(ALARM_MASK_11, tokType_alarm_mask, 0x00)
DEFINE_BASIC_TOKEN(COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_11, tokType_color_control_color_temp_physical_min, 0x0000)
DEFINE_BASIC_TOKEN(COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_11, tokType_color_control_color_temp_physical_max, 0xFEFF)
DEFINE_BASIC_TOKEN(START_UP_COLOR_TEMPERATURE_MIREDS_11, tokType_start_up_color_temperature_mireds, 0x011E)
DEFINE_BASIC_TOKEN(PHYSICAL_MIN_LEVEL_11, tokType_physical_min_level, 0x01)
DEFINE_BASIC_TOKEN(PHYSICAL_MAX_LEVEL_11, tokType_physical_max_level, 0xFE)
DEFINE_BASIC_TOKEN(MIN_LEVEL_11, tokType_min_level, 0x01)
DEFINE_BASIC_TOKEN(MAX_LEVEL_11, tokType_max_level, 0xFE)
DEFINE_BASIC_TOKEN(POWER_ON_LEVEL_11, tokType_power_on_level, 0xFE)
DEFINE_BASIC_TOKEN(ALARM_MASK_20, tokType_alarm_mask, 0x00)
DEFINE_BASIC_TOKEN(ALARM_MASK_21, tokType_alarm_mask, 0x00)
DEFINE_BASIC_TOKEN(LUX_CALIB_MULT_21, tokType_lux_calib_mult, 0x00010000)
DEFINE_BASIC_TOKEN(REVERSE_WINK_THRESHOLD_21, tokType_reverse_wink_threshold, 6000)
DEFINE_BASIC_TOKEN(ILLUM_MEASURED_FLOOR_21, tokType_illum_measured_floor, 0)
DEFINE_BASIC_TOKEN(ALARM_MASK_50, tokType_alarm_mask, 0x00)
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[4]; \
  uint8_t curNetwork = emberGetCurrentNetwork(); \
  uint8_t epNetwork; \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_1); \
    emberAfWriteServerAttribute(1, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_leave_join_reason *)ptr, TOKEN_LEAVE_JOIN_REASON_1); \
    emberAfWriteManufacturerSpecificServerAttribute(1, ZCL_COMMISSIONING_CLUSTER_ID, ZCL_LEAVE_JOIN_REASON_ATTRIBUTE_ID, 0x110C, (uint8_t*)ptr, ZCL_INT32U_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(2); \
  if((endpoint) == 2 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_2); \
    emberAfWriteServerAttribute(2, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(10); \
  if((endpoint) == 10 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_10); \
    emberAfWriteServerAttribute(10, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_color_control_color_temp_physical_min *)ptr, TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_10); \
    emberAfWriteServerAttribute(10, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_color_control_color_temp_physical_max *)ptr, TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_10); \
    emberAfWriteServerAttribute(10, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_start_up_color_temperature_mireds *)ptr, TOKEN_START_UP_COLOR_TEMPERATURE_MIREDS_10); \
    emberAfWriteServerAttribute(10, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_physical_min_level *)ptr, TOKEN_PHYSICAL_MIN_LEVEL_10); \
    emberAfWriteServerAttribute(10, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_physical_max_level *)ptr, TOKEN_PHYSICAL_MAX_LEVEL_10); \
    emberAfWriteServerAttribute(10, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_min_level *)ptr, TOKEN_MIN_LEVEL_10); \
    emberAfWriteServerAttribute(10, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_MIN_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_max_level *)ptr, TOKEN_MAX_LEVEL_10); \
    emberAfWriteServerAttribute(10, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_MAX_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_power_on_level *)ptr, TOKEN_POWER_ON_LEVEL_10); \
    emberAfWriteServerAttribute(10, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_POWER_ON_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(11); \
  if((endpoint) == 11 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_11); \
    emberAfWriteServerAttribute(11, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_color_control_color_temp_physical_min *)ptr, TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_11); \
    emberAfWriteServerAttribute(11, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_color_control_color_temp_physical_max *)ptr, TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_11); \
    emberAfWriteServerAttribute(11, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_start_up_color_temperature_mireds *)ptr, TOKEN_START_UP_COLOR_TEMPERATURE_MIREDS_11); \
    emberAfWriteServerAttribute(11, ZCL_COLOR_CONTROL_CLUSTER_ID, ZCL_START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_physical_min_level *)ptr, TOKEN_PHYSICAL_MIN_LEVEL_11); \
    emberAfWriteServerAttribute(11, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_PHYSICAL_MIN_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_physical_max_level *)ptr, TOKEN_PHYSICAL_MAX_LEVEL_11); \
    emberAfWriteServerAttribute(11, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_PHYSICAL_MAX_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_min_level *)ptr, TOKEN_MIN_LEVEL_11); \
    emberAfWriteServerAttribute(11, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_MIN_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_max_level *)ptr, TOKEN_MAX_LEVEL_11); \
    emberAfWriteServerAttribute(11, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_MAX_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_power_on_level *)ptr, TOKEN_POWER_ON_LEVEL_11); \
    emberAfWriteServerAttribute(11, ZCL_BALLAST_CONFIGURATION_CLUSTER_ID, ZCL_POWER_ON_LEVEL_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT8U_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(20); \
  if((endpoint) == 20 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_20); \
    emberAfWriteServerAttribute(20, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(21); \
  if((endpoint) == 21 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_21); \
    emberAfWriteServerAttribute(21, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_lux_calib_mult *)ptr, TOKEN_LUX_CALIB_MULT_21); \
    emberAfWriteManufacturerSpecificServerAttribute(21, ZCL_ILLUM_MEASUREMENT_CLUSTER_ID, ZCL_LUX_CALIB_MULT_ATTRIBUTE_ID, 0x110C, (uint8_t*)ptr, ZCL_INT32U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_reverse_wink_threshold *)ptr, TOKEN_REVERSE_WINK_THRESHOLD_21); \
    emberAfWriteManufacturerSpecificServerAttribute(21, ZCL_ILLUM_MEASUREMENT_CLUSTER_ID, ZCL_REVERSE_WINK_THRESHOLD_ATTRIBUTE_ID, 0x110C, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_illum_measured_floor *)ptr, TOKEN_ILLUM_MEASURED_FLOOR_21); \
    emberAfWriteManufacturerSpecificServerAttribute(21, ZCL_ILLUM_MEASUREMENT_CLUSTER_ID, ZCL_ILLUM_MEASURED_FLOOR_ATTRIBUTE_ID, 0x110C, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  } \
  epNetwork = emberAfNetworkIndexFromEndpoint(50); \
  if((endpoint) == 50 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_alarm_mask *)ptr, TOKEN_ALARM_MASK_50); \
    emberAfWriteServerAttribute(50, ZCL_BASIC_CLUSTER_ID, ZCL_ALARM_MASK_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_BITMAP8_ATTRIBUTE_TYPE); \
  } \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[4]; \
  MEMSET(allZeroData, 0, 4); \
  if ( data == NULL ) data = allZeroData; \
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_1, data); \
    } else if ( clusterId == 0x15 ) { \
      if ( metadata->attributeId == 0xE002 && 0x110C == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_LEAVE_JOIN_REASON_1, data); \
    } \
  } else if ( endpoint == 2) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_2, data); \
    } \
  } else if ( endpoint == 10) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_10, data); \
    } else if ( clusterId == 0x0300 ) { \
      if ( metadata->attributeId == 0x400B && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_10, data); \
      if ( metadata->attributeId == 0x400C && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_10, data); \
      if ( metadata->attributeId == 0x4010 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_START_UP_COLOR_TEMPERATURE_MIREDS_10, data); \
    } else if ( clusterId == 0x0301 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_PHYSICAL_MIN_LEVEL_10, data); \
      if ( metadata->attributeId == 0x0001 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_PHYSICAL_MAX_LEVEL_10, data); \
      if ( metadata->attributeId == 0x0010 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MIN_LEVEL_10, data); \
      if ( metadata->attributeId == 0x0011 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MAX_LEVEL_10, data); \
      if ( metadata->attributeId == 0x0012 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_POWER_ON_LEVEL_10, data); \
    } \
  } else if ( endpoint == 11) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_11, data); \
    } else if ( clusterId == 0x0300 ) { \
      if ( metadata->attributeId == 0x400B && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_11, data); \
      if ( metadata->attributeId == 0x400C && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_11, data); \
      if ( metadata->attributeId == 0x4010 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_START_UP_COLOR_TEMPERATURE_MIREDS_11, data); \
    } else if ( clusterId == 0x0301 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_PHYSICAL_MIN_LEVEL_11, data); \
      if ( metadata->attributeId == 0x0001 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_PHYSICAL_MAX_LEVEL_11, data); \
      if ( metadata->attributeId == 0x0010 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MIN_LEVEL_11, data); \
      if ( metadata->attributeId == 0x0011 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_MAX_LEVEL_11, data); \
      if ( metadata->attributeId == 0x0012 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_POWER_ON_LEVEL_11, data); \
    } \
  } else if ( endpoint == 20) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_20, data); \
    } \
  } else if ( endpoint == 21) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_21, data); \
    } else if ( clusterId == 0x0400 ) { \
      if ( metadata->attributeId == 0xE000 && 0x110C == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_LUX_CALIB_MULT_21, data); \
      if ( metadata->attributeId == 0xE001 && 0x110C == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_REVERSE_WINK_THRESHOLD_21, data); \
      if ( metadata->attributeId == 0xE012 && 0x110C == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ILLUM_MEASURED_FLOOR_21, data); \
    } \
  } else if ( endpoint == 50) { \
    if ( clusterId == 0x00 ) { \
      if ( metadata->attributeId == 0x0013 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_ALARM_MASK_50, data); \
    } \
  } \
} while(false)


