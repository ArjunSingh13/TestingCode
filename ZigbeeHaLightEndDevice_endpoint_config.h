// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG


// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (7)


// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Time,time */, \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 4,Default value: Commissioning,extended pan id */, \
0x07, 0xFF, 0xF8, 0x00 /* 12,Default value: Commissioning,channel mask */, \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 16,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, \
0xFF, 0xFF, 0xFF, 0xFF /* 24,Default value: Over the Air Bootloading,Offset (address) into the file */, \
0xFF, 0xFF, 0xFF, 0xFF /* 28,Default value: Over the Air Bootloading,OTA Current File Version */, \
0x00, 0x01, 0x00, 0x00 /* 32,Default value: Illuminance Measurement,calibration multiplier */, \
0x00, 0x00, 0x00, 0x01 /* 36,Default value: Electrical Measurement,measurement type */, \
0x00, 0x00, 0x00, 0x01 /* 40,Default value: Electrical Measurement,power multiplier */, \
0x00, 0x00, 0x00, 0x0A /* 44,Default value: Electrical Measurement,power divisor */, \
  }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
0xFF, 0xFF, 0xFF, 0xFF /* 0,Default value: Time,time */, \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 4,Default value: Commissioning,extended pan id */, \
0x00, 0xF8, 0xFF, 0x07 /* 12,Default value: Commissioning,channel mask */, \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 16,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, \
0xFF, 0xFF, 0xFF, 0xFF /* 24,Default value: Over the Air Bootloading,Offset (address) into the file */, \
0xFF, 0xFF, 0xFF, 0xFF /* 28,Default value: Over the Air Bootloading,OTA Current File Version */, \
0x00, 0x00, 0x01, 0x00 /* 32,Default value: Illuminance Measurement,calibration multiplier */, \
0x01, 0x00, 0x00, 0x00 /* 36,Default value: Electrical Measurement,measurement type */, \
0x01, 0x00, 0x00, 0x00 /* 40,Default value: Electrical Measurement,power multiplier */, \
0x0A, 0x00, 0x00, 0x00 /* 44,Default value: Electrical Measurement,power divisor */, \
  }
#endif // BIGENDIAN_CPU


// MinMax defaults
#define GENERATED_MIN_MAX_DEFAULTS { \
    { \
      (uint8_t*)1, \
      (uint8_t*)0x00, \
      (uint8_t*)0xFF \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0xFF \
    }, \
    { \
      (uint8_t*)2, \
      (uint8_t*)0x00, \
      (uint8_t*)0xFF \
    }, \
    { \
      (uint8_t*)0x01, \
      (uint8_t*)0x00, \
      (uint8_t*)0xFF \
    }, \
    { \
      (uint8_t*)0x0000, \
      (uint8_t*)0x0000, \
      (uint8_t*)0xFFFF \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0x80 \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0xFF \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0xFF \
    }, \
    { \
      (uint8_t*)0x0000, \
      (uint8_t*)0x0000, \
      (uint8_t*)0xFFF7 \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0x01 \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0x80 \
    }, \
    { \
      (uint8_t*)0x00, \
      (uint8_t*)0x00, \
      (uint8_t*)0x01 \
    }, \
  }


// Generated attributes
#define GENERATED_ATTRIBUTES { \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[0]) } }, /* 0 / Basic / ZCL version*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[1]) } }, /* 1 / Basic / application version*/\
    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[2]) } }, /* 2 / Basic / stack version*/\
    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00 } }, /* 3 / Basic / hardware version*/\
    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (0x00), { NULL } }, /* 4 / Basic / manufacturer name*/\
    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (0x00), { NULL } }, /* 5 / Basic / model identifier*/\
    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 / Basic / date code*/\
    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(minMaxDefaults[3]) } }, /* 7 / Basic / power source*/\
    { 0x0010, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 8 / Basic / location description*/\
    { 0x0012, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x01 } }, /* 9 / Basic / device enabled*/\
    { 0x0013, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x00 } }, /* 10 / Basic / alarm mask*/\
    { 0x4000, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (0x00), { NULL } }, /* 11 / Basic / sw build id*/\
    { 0xE001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0 } }, /* 12 / Basic / reset counter*/\
    { 0xE002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0 } }, /* 13 / Basic / last reset*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 14 / Basic / cluster revision*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)1 } }, /* 15 / Identify / cluster revision*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[4]) } }, /* 16 / Identify / identify time*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 17 / Identify / cluster revision*/\
    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[5]) } }, /* 18 / Groups / name support*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 19 / Groups / cluster revision*/\
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[6]) } }, /* 20 / Scenes / scene count*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[7]) } }, /* 21 / Scenes / current scene*/\
    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[8]) } }, /* 22 / Scenes / current group*/\
    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[9]) } }, /* 23 / Scenes / scene valid*/\
    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[10]) } }, /* 24 / Scenes / name support*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 25 / Scenes / cluster revision*/\
    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MIN_MAX), { (uint8_t*)&(minMaxDefaults[11]) } }, /* 26 / On/off / on/off*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 27 / On/off / cluster revision*/\
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00 } }, /* 28 / Level Control / current level*/\
    { 0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 29 / Level Control / options*/\
    { 0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0xFE } }, /* 30 / Level Control / on level*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 31 / Level Control / cluster revision*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 32 / Alarms / alarm count*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 33 / Alarms / cluster revision*/\
    { 0x0000, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(generatedDefaults[0]) } }, /* 34 / Time / time*/\
    { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00 } }, /* 35 / Time / time status*/\
    { 0xE000, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC|ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 36 / Time / UpTime*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 37 / Time / cluster revision*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0xFFFF } }, /* 38 / Commissioning / short address*/\
    { 0x0001, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)&(generatedDefaults[4]) } }, /* 39 / Commissioning / extended pan id*/\
    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0xFFFF } }, /* 40 / Commissioning / pan id*/\
    { 0x0003, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)&(generatedDefaults[12]) } }, /* 41 / Commissioning / channel mask*/\
    { 0x0004, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x02 } }, /* 42 / Commissioning / protocol version*/\
    { 0x0005, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x02 } }, /* 43 / Commissioning / stack profile*/\
    { 0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x03 } }, /* 44 / Commissioning / startup control*/\
    { 0x0010, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 45 / Commissioning / trust center address*/\
    { 0x0012, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 46 / Commissioning / network key*/\
    { 0x0013, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x01 } }, /* 47 / Commissioning / use insecure join*/\
    { 0x0014, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 48 / Commissioning / preconfigured link key*/\
    { 0x0015, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 49 / Commissioning / network key sequence number*/\
    { 0x0016, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x05 } }, /* 50 / Commissioning / network key type*/\
    { 0x0017, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000 } }, /* 51 / Commissioning / network manager address*/\
    { 0x0020, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x05 } }, /* 52 / Commissioning / scan attempts*/\
    { 0x0021, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0064 } }, /* 53 / Commissioning / time between scans*/\
    { 0x0022, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x003C } }, /* 54 / Commissioning / rejoin interval*/\
    { 0x0023, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0E10 } }, /* 55 / Commissioning / max rejoin interval*/\
    { 0x0030, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000UL } }, /* 56 / Commissioning / indirect poll rate*/\
    { 0x0031, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00UL } }, /* 57 / Commissioning / parent retry threshold*/\
    { 0x0040, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 58 / Commissioning / concentrator flag*/\
    { 0x0041, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0F } }, /* 59 / Commissioning / concentrator radius*/\
    { 0x0042, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 60 / Commissioning / concentrator discovery time*/\
    { 0xE000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0xFF } }, /* 61 / Commissioning / link key index*/\
    { 0xE001, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0x00 } }, /* 62 / Commissioning / commissioned*/\
    { 0xE002, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { NULL } }, /* 63 / Commissioning / leave/join reason*/\
    { 0xE100, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0 } }, /* 64 / Commissioning / airplane mode*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 65 / Commissioning / cluster revision*/\
    { 0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[16]) } }, /* 66 / Over the Air Bootloading / OTA Upgrade Server ID*/\
    { 0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[24]) } }, /* 67 / Over the Air Bootloading / Offset (address) into the file*/\
    { 0x0002, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[28]) } }, /* 68 / Over the Air Bootloading / OTA Current File Version*/\
    { 0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00 } }, /* 69 / Over the Air Bootloading / OTA Upgrade Status*/\
    { 0x0008, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0000UL } }, /* 70 / Over the Air Bootloading / Image Type ID*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)1 } }, /* 71 / Over the Air Bootloading / cluster revision*/\
    { 0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x616B } }, /* 72 / Color Control / current x*/\
    { 0x0004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x607D } }, /* 73 / Color Control / current y*/\
    { 0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00FA } }, /* 74 / Color Control / color temperature*/\
    { 0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)2 } }, /* 75 / Color Control / color mode*/\
    { 0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00 } }, /* 76 / Color Control / color control options*/\
    { 0x400B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x0000 } }, /* 77 / Color Control / color temp physical min*/\
    { 0x400C, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0xFEFF } }, /* 78 / Color Control / color temp physical max*/\
    { 0x400D, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000UL } }, /* 79 / Color Control / couple color temp to level min-mireds*/\
    { 0x4010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x011E } }, /* 80 / Color Control / start up color temperature mireds*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 81 / Color Control / cluster revision*/\
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x01 } }, /* 82 / Ballast Configuration / physical min level*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0xFE } }, /* 83 / Ballast Configuration / physical max level*/\
    { 0x0002, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00 } }, /* 84 / Ballast Configuration / ballast status*/\
    { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x01 } }, /* 85 / Ballast Configuration / min level*/\
    { 0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0xFE } }, /* 86 / Ballast Configuration / max level*/\
    { 0x0012, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0xFE } }, /* 87 / Ballast Configuration / power on level*/\
    { 0x0013, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000 } }, /* 88 / Ballast Configuration / power on fade time*/\
    { 0x0033, ZCL_INT24U_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 89 / Ballast Configuration / lamp burn hours*/\
    { 0x0036, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 19, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC|ATTRIBUTE_MASK_EXTERNAL_STORAGE), { NULL } }, /* 90 / Ballast Configuration / linearization value*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 91 / Ballast Configuration / cluster revision*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 92 / Illuminance Measurement / measured value*/\
    { 0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0xFFFF } }, /* 93 / Illuminance Measurement / min measured value*/\
    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0xFFFF } }, /* 94 / Illuminance Measurement / max measured value*/\
    { 0xE000, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)&(generatedDefaults[32]) } }, /* 95 / Illuminance Measurement / calibration multiplier*/\
    { 0xE001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)6000 } }, /* 96 / Illuminance Measurement / reverse wink threshold*/\
    { 0xE010, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0x00 } }, /* 97 / Illuminance Measurement / bus status*/\
    { 0xE011, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0x00 } }, /* 98 / Illuminance Measurement / alarm mask*/\
    { 0xE012, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_TOKENIZE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0 } }, /* 99 / Illuminance Measurement / measured floor*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 100 / Illuminance Measurement / cluster revision*/\
    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00 } }, /* 101 / Occupancy Sensing / occupancy*/\
    { 0x0001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0xFF } }, /* 102 / Occupancy Sensing / occupancy sensor type*/\
    { 0x0002, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00 } }, /* 103 / Occupancy Sensing / occupancy sensor type bitmap*/\
    { 0x0010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x003C } }, /* 104 / Occupancy Sensing / PIR occupied to unoccupied delay*/\
    { 0xE010, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0x00 } }, /* 105 / Occupancy Sensing / bus status*/\
    { 0xE011, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE|ATTRIBUTE_MASK_MANUFACTURER_SPECIFIC), { (uint8_t*)0x00 } }, /* 106 / Occupancy Sensing / alarm mask*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 107 / Occupancy Sensing / cluster revision*/\
    { 0x0000, ZCL_BITMAP32_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t*)&(generatedDefaults[36]) } }, /* 108 / Electrical Measurement / measurement type*/\
    { 0x0402, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t*)&(generatedDefaults[40]) } }, /* 109 / Electrical Measurement / power multiplier*/\
    { 0x0403, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { (uint8_t*)&(generatedDefaults[44]) } }, /* 110 / Electrical Measurement / power divisor*/\
    { 0x050B, ZCL_INT16S_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0xFFFF } }, /* 111 / Electrical Measurement / active power*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 112 / Electrical Measurement / cluster revision*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 113 / Diagnostics / number of resets*/\
    { 0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 114 / Diagnostics / persistent memory writes*/\
    { 0x0100, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 115 / Diagnostics / mac rx broadcast*/\
    { 0x0101, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 116 / Diagnostics / mac tx broadcast*/\
    { 0x0102, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 117 / Diagnostics / mac rx unicast*/\
    { 0x0103, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (0x00), { NULL } }, /* 118 / Diagnostics / mac tx unicast*/\
    { 0x0104, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 119 / Diagnostics / mac tx unicast retry*/\
    { 0x0105, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 120 / Diagnostics / mac tx unicast fail*/\
    { 0x0106, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 121 / Diagnostics / aps rx broadcast*/\
    { 0x0107, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 122 / Diagnostics / aps tx broadcast*/\
    { 0x0108, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 123 / Diagnostics / aps rx unicast*/\
    { 0x0109, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 124 / Diagnostics / aps unicast success*/\
    { 0x010A, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 125 / Diagnostics / aps tx unicast retries*/\
    { 0x010B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 126 / Diagnostics / aps tx unicast failures*/\
    { 0x010C, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 127 / Diagnostics / route discovery initiated*/\
    { 0x010D, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 128 / Diagnostics / neighbor added*/\
    { 0x010E, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 129 / Diagnostics / neighbor moved*/\
    { 0x010F, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 130 / Diagnostics / neighbor stale*/\
    { 0x0110, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 131 / Diagnostics / join indication*/\
    { 0x0111, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 132 / Diagnostics / child moved*/\
    { 0x0112, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 133 / Diagnostics / network frame control failure*/\
    { 0x0113, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 134 / Diagnostics / aps frame control failure*/\
    { 0x0114, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 135 / Diagnostics / aps unauthorized key*/\
    { 0x0115, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 136 / Diagnostics / network decryption failure*/\
    { 0x0116, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 137 / Diagnostics / aps decryption failure*/\
    { 0x0117, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 138 / Diagnostics / packet buffer allocation failures*/\
    { 0x0118, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 139 / Diagnostics / relayed unicasts*/\
    { 0x0119, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 140 / Diagnostics / phy to mac queue limit reached*/\
    { 0x011A, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 141 / Diagnostics / packet validate drop count*/\
    { 0x011B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000 } }, /* 142 / Diagnostics / average mac retry per aps message sent*/\
    { 0x011C, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00 } }, /* 143 / Diagnostics / last message lqi*/\
    { 0x011D, ZCL_INT8S_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00 } }, /* 144 / Diagnostics / last message rssi*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)1 } }, /* 145 / Diagnostics / cluster revision*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001 } }, /* 146 / Encelium Interface Cluster / cluster revision*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT|ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 147 / Encelium Diagnostics / cluster revision*/\
    { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x0001 } }, /* 148 / Encelium Diagnostics / cluster revision*/\
    { 0x000E, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)255 } }, /* 149 / Encelium Emergency Cluster / Test Execution Time-out (in days)*/\
    { 0x0011, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)255 } }, /* 150 / Encelium Emergency Cluster / Battery Charge*/\
    { 0x0016, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)255 } }, /* 151 / Encelium Emergency Cluster / Emergency Level*/\
    { 0x001A, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)255 } }, /* 152 / Encelium Emergency Cluster / Emergency Mode*/\
    { 0x001B, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)255 } }, /* 153 / Encelium Emergency Cluster / Emergency Features*/\
    { 0x001C, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0 } }, /* 154 / Encelium Emergency Cluster / Failure Status*/\
    { 0x001D, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0 } }, /* 155 / Encelium Emergency Cluster / Emergency Status*/\
  }


// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS \
const EmberAfGenericClusterFunction emberAfFuncArrayBasicClusterServer[] = { (EmberAfGenericClusterFunction)emberAfBasicClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayAlarmClusterServer[] = { (EmberAfGenericClusterFunction)emberAfAlarmClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayTimeClusterServer[] = { (EmberAfGenericClusterFunction)emberAfTimeClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfTimeClusterServerAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayCommissioningClusterServer[] = { (EmberAfGenericClusterFunction)emberAfCommissioningClusterServerAttributeChangedCallback,(EmberAfGenericClusterFunction)emberAfCommissioningClusterServerManufacturerSpecificAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterClient[] = { (EmberAfGenericClusterFunction)emberAfOtaBootloadClusterClientInitCallback,(EmberAfGenericClusterFunction)emberAfOtaBootloadClusterClientDefaultResponseCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayEnceliumEmergencyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfEnceliumEmergencyClusterServerManufacturerSpecificAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayIllumMeasurementClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIllumMeasurementClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayOccupancySensingClusterServer[] = { (EmberAfGenericClusterFunction)emberAfOccupancySensingClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayOnOffClusterServer[] = { (EmberAfGenericClusterFunction)emberAfOnOffClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayLevelControlClusterServer[] = { (EmberAfGenericClusterFunction)emberAfLevelControlClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayBallastConfigurationClusterServer[] = { (EmberAfGenericClusterFunction)emberAfBallastConfigurationClusterServerAttributeChangedCallback,(EmberAfGenericClusterFunction)emberAfBallastConfigurationClusterServerPreAttributeChangedCallback}; \


// Clusters definitions
#define GENERATED_CLUSTERS { \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 15, 84, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayBasicClusterServer, },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[18]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
    { 0x0009, (EmberAfAttributeMetadata*)&(generatedAttributes[32]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayAlarmClusterServer, },    \
    { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[34]), 4, 0, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayTimeClusterServer, },    \
    { 0x0015, (EmberAfAttributeMetadata*)&(generatedAttributes[38]), 28, 86, (CLUSTER_MASK_SERVER| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION| CLUSTER_MASK_MANUFACTURER_SPECIFIC_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayCommissioningClusterServer, },    \
    { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[66]), 6, 21, (CLUSTER_MASK_CLIENT| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION), emberAfFuncArrayOtaBootloadClusterClient, },    \
    { 0x0B05, (EmberAfAttributeMetadata*)&(generatedAttributes[113]), 33, 72, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0xFC03, (EmberAfAttributeMetadata*)&(generatedAttributes[146]), 1, 2, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0xFC04, (EmberAfAttributeMetadata*)&(generatedAttributes[147]), 1, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0xFC04, (EmberAfAttributeMetadata*)&(generatedAttributes[148]), 1, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 15, 84, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayBasicClusterServer, },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 15, 84, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayBasicClusterServer, },    \
    { 0x0009, (EmberAfAttributeMetadata*)&(generatedAttributes[32]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayAlarmClusterServer, },    \
    { 0xFC16, (EmberAfAttributeMetadata*)&(generatedAttributes[149]), 7, 7, (CLUSTER_MASK_SERVER| CLUSTER_MASK_MANUFACTURER_SPECIFIC_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayEnceliumEmergencyClusterServer, },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 15, 84, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayBasicClusterServer, },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0009, (EmberAfAttributeMetadata*)&(generatedAttributes[32]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayAlarmClusterServer, },    \
    { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[34]), 4, 0, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayTimeClusterServer, },    \
    { 0x0400, (EmberAfAttributeMetadata*)&(generatedAttributes[92]), 9, 18, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayIllumMeasurementClusterServer, },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 15, 84, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayBasicClusterServer, },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 2, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0009, (EmberAfAttributeMetadata*)&(generatedAttributes[32]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayAlarmClusterServer, },    \
    { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[34]), 4, 0, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayTimeClusterServer, },    \
    { 0x0406, (EmberAfAttributeMetadata*)&(generatedAttributes[101]), 7, 9, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayOccupancySensingClusterServer, },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 15, 84, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayBasicClusterServer, },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[16]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[18]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[20]), 6, 8, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[26]), 2, 3, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayOnOffClusterServer, },    \
    { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[28]), 4, 5, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayLevelControlClusterServer, },    \
    { 0x0009, (EmberAfAttributeMetadata*)&(generatedAttributes[32]), 2, 4, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayAlarmClusterServer, },    \
    { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[34]), 4, 0, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayTimeClusterServer, },    \
    { 0x0300, (EmberAfAttributeMetadata*)&(generatedAttributes[72]), 10, 18, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0301, (EmberAfAttributeMetadata*)&(generatedAttributes[82]), 10, 13, (CLUSTER_MASK_SERVER| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION| CLUSTER_MASK_PRE_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayBallastConfigurationClusterServer, },    \
    { 0x0B04, (EmberAfAttributeMetadata*)&(generatedAttributes[108]), 5, 16, (CLUSTER_MASK_SERVER), NULL,  },    \
  }


// Endpoint types
#define GENERATED_ENDPOINT_TYPES {        \
    { (EmberAfCluster*)&(generatedClusters[0]), 11, 276 }, \
    { (EmberAfCluster*)&(generatedClusters[11]), 3, 90 }, \
    { (EmberAfCluster*)&(generatedClusters[14]), 3, 95 }, \
    { (EmberAfCluster*)&(generatedClusters[17]), 6, 112 }, \
    { (EmberAfCluster*)&(generatedClusters[23]), 6, 103 }, \
    { (EmberAfCluster*)&(generatedClusters[29]), 11, 158 }, \
  }


// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
{0x0010, 0x110C}, \
{0x0008, 0x110C}, \
{0x0009, 0x110C}, \
{0x000A, 0x110C}, \
  }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (4)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
{0x0040, 0x110C}, \
{0x0060, 0x110C}, \
{0x0061, 0x110C}, \
{0x0062, 0x110C}, \
{0x0063, 0x110C}, \
{0x0024, 0x110C}, \
{0x0069, 0x110C}, \
{0x006A, 0x110C}, \
{0x000C, 0x110C}, \
{0x000D, 0x110C}, \
{0x0095, 0x110C}, \
{0x0096, 0x110C}, \
{0x0097, 0x110C}, \
{0x0098, 0x110C}, \
{0x0099, 0x110C}, \
{0x005A, 0x110C}, \
{0x009A, 0x110C}, \
{0x009B, 0x110C}, \
{0x003D, 0x110C}, \
{0x003E, 0x110C}, \
{0x003F, 0x110C}, \
{0x005F, 0x110C}, \
  }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (22)


// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (33)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (60)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 992

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY { 1, 2, 10, 11, 20, 21, 50 }

// Array of profile ids
#define FIXED_PROFILE_IDS { 260, 260, 260, 260, 260, 260, 260 }

// Array of device ids
#define FIXED_DEVICE_IDS { 61446, 8, 257, 257, 263, 262, 61448 }

// Array of device versions
#define FIXED_DEVICE_VERSIONS { 1, 1, 1, 1, 1, 1, 1 }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { 0, 1, 5, 5, 4, 3, 2 }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { 0, 0, 0, 0, 0, 0, 0 }


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginEepromInitCallback(void); \
  void emberAfPluginOsramdsUserinterfaceInitCallback(void); \
  void emberAfPluginEnceliumSwTimerInitCallback(void); \
  void emberAfPluginEnceliumCommissioningInitCallback(void); \
  void emberAfPluginEnceliumInterpanInitCallback(void); \
  void emberAfPluginEnceliumInterfaceInitCallback(void); \
  void emberAfPluginReportingInitCallback(void); \
  void emberAfPluginConcentratorInitCallback(void); \
  void emberAfPluginOsramdsReset2factoryInitCallback(void); \
  void emberAfPluginCountersInitCallback(void); \
  void emberAfPluginEnceliumDiagnosticsInitCallback(void); \


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
  emberAfPluginEepromInitCallback(); \
  emberAfPluginOsramdsUserinterfaceInitCallback(); \
  emberAfPluginEnceliumSwTimerInitCallback(); \
  emberAfPluginEnceliumCommissioningInitCallback(); \
  emberAfPluginEnceliumInterpanInitCallback(); \
  emberAfPluginEnceliumInterfaceInitCallback(); \
  emberAfPluginReportingInitCallback(); \
  emberAfPluginConcentratorInitCallback(); \
  emberAfPluginOsramdsReset2factoryInitCallback(); \
  emberAfPluginCountersInitCallback(); \
  emberAfPluginEnceliumDiagnosticsInitCallback(); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
  void emberAfPluginEnceliumCommissioningStackStatusCallback(EmberStatus status); \
  void emberAfPluginEnceliumRestartMessageStackStatusCallback(EmberStatus status); \
  void emberAfPluginReportingStackStatusCallback(EmberStatus status); \
  void emberAfPluginConcentratorStackStatusCallback(EmberStatus status); \
  void emberAfPluginOtaClientStackStatusCallback(EmberStatus status); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
  emberAfPluginEnceliumCommissioningStackStatusCallback(status); \
  emberAfPluginEnceliumRestartMessageStackStatusCallback(status); \
  emberAfPluginReportingStackStatusCallback(status); \
  emberAfPluginConcentratorStackStatusCallback(status); \
  emberAfPluginOtaClientStackStatusCallback(status); \


#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS \
  void emberAfPluginEnceliumCommissioningMessageSentCallback( \
  EmberOutgoingMessageType type, \
  uint16_t indexOrDestination, \
  EmberApsFrame *apsFrame, \
  EmberStatus status, \
  uint16_t messageLength, \
  uint8_t *messageContents); \
  void emberAfPluginConcentratorMessageSentCallback( \
  EmberOutgoingMessageType type, \
  uint16_t indexOrDestination, \
  EmberApsFrame *apsFrame, \
  EmberStatus status, \
  uint16_t messageLength, \
  uint8_t *messageContents); \


#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS \
  emberAfPluginEnceliumCommissioningMessageSentCallback( \
  type, \
  indexOrDestination, \
  apsFrame, \
  status, \
  messageLength, \
  messageContents); \
  emberAfPluginConcentratorMessageSentCallback( \
  type, \
  indexOrDestination, \
  apsFrame, \
  status, \
  messageLength, \
  messageContents); \


#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_DECLARATIONS \
  void emberAfPluginEnceliumCommissioningTickCallback(void); \


#define EMBER_AF_GENERATED_PLUGIN_TICK_FUNCTION_CALLS \
  emberAfPluginEnceliumCommissioningTickCallback(); \


// Generated data for the command discovery
#define GENERATED_COMMANDS { \
    { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Basic / ResetToFactoryDefaults */ \
    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Identify / IdentifyQueryResponse */ \
    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
    { 0x0006, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
    { 0x0006, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
    { 0x0006, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
    { 0x0008, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevel */ \
    { 0x0008, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Move */ \
    { 0x0008, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Step */ \
    { 0x0008, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Stop */ \
    { 0x0008, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevelWithOnOff */ \
    { 0x0008, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveWithOnOff */ \
    { 0x0008, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StepWithOnOff */ \
    { 0x0008, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StopWithOnOff */ \
    { 0x0009, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Alarms / Alarm */ \
    { 0x0009, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Alarms / ResetAlarm */ \
    { 0x0009, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Alarms / ResetAllAlarms */ \
    { 0x0009, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Alarms / GetAlarm */ \
    { 0x0015, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / RestartDeviceResponse */ \
    { 0x0015, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Commissioning / RestartDevice */ \
    { 0x0015, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / SaveStartupParametersResponse */ \
    { 0x0015, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / RestoreStartupParametersResponse */ \
    { 0x0015, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Commissioning / ResetStartupParametersResponse */ \
    { 0x0015, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Commissioning / ResetStartupParameters */ \
    { 0x0019, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / ImageNotify */ \
    { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QueryNextImageRequest */ \
    { 0x0019, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / QueryNextImageResponse */ \
    { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImageBlockRequest */ \
    { 0x0019, 0x05, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / ImageBlockResponse */ \
    { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / UpgradeEndRequest */ \
    { 0x0019, 0x07, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / UpgradeEndResponse */ \
    { 0x0300, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToColorTemperature */ \
    { 0x0300, 0x47, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StopMoveStep */ \
    { 0x0300, 0x4B, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveColorTemperature */ \
    { 0x0300, 0x4C, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StepColorTemperature */ \
    { 0xFC03, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Interface Cluster / InterfaceConfig */ \
    { 0xFC03, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Interface Cluster / RescanInterface */ \
    { 0xFC03, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Interface Cluster / SetInterface */ \
    { 0xFC04, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ReportNeighborsResponse */ \
    { 0xFC04, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ReportNeighbors */ \
    { 0xFC04, 0x01, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ProximityNodes */ \
    { 0xFC04, 0x02, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ReportProximityNodesResponse */ \
    { 0xFC04, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ReportProximityNodes */ \
    { 0xFC04, 0x03, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ResetProximityNodesData */ \
    { 0xFC04, 0x04, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Diagnostics / ReportAndTriggerProximityNodes */ \
    { 0xFC16, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Emergency Cluster / Inhibit */ \
    { 0xFC16, 0x04, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Emergency Cluster / StartTest */ \
    { 0xFC16, 0x05, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Emergency Cluster / StopTest */ \
    { 0xFC16, 0x06, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Emergency Cluster / StartIdentify */ \
    { 0xFC16, 0x0F, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_MANUFACTURER_SPECIFIC }, /* Encelium Emergency Cluster / ProlongTime */ \
  }
#define EMBER_AF_GENERATED_COMMAND_COUNT (74)

// Command manufacturer codes
#define GENERATED_COMMAND_MANUFACTURER_CODES {      \
{0x0040, 0x110C}, \
{0x0041, 0x110C}, \
{0x0042, 0x110C}, \
{0x0043, 0x110C}, \
{0x0044, 0x110C}, \
{0x0045, 0x110C}, \
{0x0046, 0x110C}, \
{0x0047, 0x110C}, \
{0x0048, 0x110C}, \
{0x0049, 0x110C}, \
{0x003B, 0x110C}, \
{0x003C, 0x110C}, \
{0x003D, 0x110C}, \
{0x003E, 0x110C}, \
{0x003F, 0x110C}, \
  }
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (15)


// Generated reporting configuration defaults
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS {\
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 10, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 10, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 10, 0x0300, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 10, 0x0300, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 10, 0x0300, 0x0007, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 11, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 11, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 11, 0x0300, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 11, 0x0300, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 11, 0x0300, 0x0007, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 20, 0x0406, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 21, 0x0400, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, \
}
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (12)
#endif // SILABS_AF_ENDPOINT_CONFIG
